1 - 
Perceções: p.lixo()
           p.toque()
Ações:     "andar"
           "rodar"
           "esperar"
           "aspirar"

def agente.aspirador(p):
  if p.lixo():
    return "aspirador"
  elif p.toque():
    return "rodar"
  else:
    return "andar"

2 -
Perceções: p.lixo()
Ações:     "andar"
           "rodar"
           "esperar"
           "aspirar"
class Agente:
  def __init__(self):
    self _posicao = 0
    self _parede = False
  def invoca(self, p):
    if self._posicao == 4:
      return "esperar"
    elif p.lixo():
      return "aspirar"
    elif self._parede:
      return "rodar"
      return "andar"
    else:
      self._parede = True
      self._posicao += 1
      return "andar"

3 -
Perceções: p.lixo()
           p.toque()
Ações:     "andar"
           "rodar"
           "esperar"
           "aspirar"
import random

def agente.aspirador(p):
  if p.lixo():
    return "aspirar"
  if p.toque():
    return "rodar"
  else:
    return random.choice(["andar", "rodar"])

4 -
Perceções: p.moeda()
Ações:     "esperar"
           "ensaca"
           "troca-saco-e-ensaca"
Saco tem no máximo 50 moedas
class Agente:
  def __init__(self):
    self._moedas = 0
  def invoca(self, p):
    if p.moeda():
      if self._moedas == 50:
        self._moedas = 1
        return "troca-saco-e-ensaca"
      else:
        self._moedas += 1
        return "ensaca"
    else:
      return "esperar"

5 -
Perceções: p.moeda()
           p.numero_moedas()
Ações:     "esperar"
           "ensaca"
           "troca-saco-e-ensaca"
def agente(p):
  if p.moeda():
    if p.numero_moedas() == 50:
      return "troca-saco-e-ennsaca"
    else:
      return "ensaca"
  else:
    return "esperar"

6 -
Perceções: p.distancia()
Ações:     "andar"
           "esperar"
def agente(p):
  return "andar" if p.distancia() else "esperar"

7 -
Perceções: p.lixo()
Ações:     "andar"
           "esperar"
           "aspirar"

class Agente:
  def __init__(self):
    self._posicao = 0
  def invoca(self, p):
    if p.lixo():
      return "aspirar"
    elif self._posicao == 7:
      return "esperar"
    else:
      self._posicao += 1
      return "andar"

8 -
Perceções: p.objectivo()
Ações:     "anda+"
           "anda-"
           "esperar"
class Agente:
  def __init__(self, inicial):
    self._posicao = inicial
  def invoca(self, p):
    if self._posicao == p.objectivo():
      return "esperar"
    elif (self._posicao - p.objectivo()) % 10 <= 5:
      return "anda-"
    else:
      return "anda+"
    